import{p as j,m as F,$ as M,q as E,_ as O,w as R,v as S,x as _,y as P,g as T,b as z,j as q,E as C,R as N,O as k,a as G,c as Y,z as B,d as H,e as I,f as J,h as K,N as L,i as Q,k as U,l as V,n as W,A as X,o as Z}from"./@ucast-BiZkLRnB.js";import{i as D,r as ee}from"./@vue-BedgDXZT.js";function d(t){return Array.isArray(t)?t:[t]}const p="__caslSubjectType__",h=t=>{const e=typeof t;return e==="string"||e==="function"},te=t=>t.modelName||t.name;function m(t){return Object.hasOwn(t,p)?t[p]:te(t.constructor)}const g={function:t=>t.constructor,string:m};function b(t,e,s){for(let n=s;n<e.length;n++)t.push(e[n])}function y(t,e){if(!t||!t.length)return e||[];if(!e||!e.length)return t||[];let s=0,n=0;const r=[];for(;s<t.length&&n<e.length;)t[s].priority<e[n].priority?(r.push(t[s]),s++):(r.push(e[n]),n++);return b(r,t,s),b(r,e,n),r}function u(t,e,s){let n=t.get(e);return n||(n=s(),t.set(e,n)),n}const se=t=>t;function ne(t,e){if(Array.isArray(t.fields)&&!t.fields.length)throw new Error("`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa");if(t.fields&&!e.fieldMatcher)throw new Error('You need to pass "fieldMatcher" option in order to restrict access by fields');if(t.conditions&&!e.conditionsMatcher)throw new Error('You need to pass "conditionsMatcher" option in order to restrict access by conditions')}class re{constructor(e,s,n=0){ne(e,s),this.action=s.resolveAction(e.action),this.subject=e.subject,this.inverted=!!e.inverted,this.conditions=e.conditions,this.reason=e.reason,this.origin=e,this.fields=e.fields?d(e.fields):void 0,this.priority=n,this.t=s}i(){return this.conditions&&!this.o&&(this.o=this.t.conditionsMatcher(this.conditions)),this.o}get ast(){const e=this.i();return e?e.ast:void 0}matchesConditions(e){return this.conditions?!e||h(e)?!this.inverted:this.i()(e):!0}matchesField(e){return this.fields?e?(this.u||(this.u=this.t.fieldMatcher(this.fields)),this.u(e)):!this.inverted:!0}}function ie(t,e){const s={value:t,prev:e,next:null};return e&&(e.next=s),s}function oe(t){t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next),t.next=t.prev=null}const ce=t=>({value:t.value,prev:t.prev,next:t.next}),v=()=>({rules:[],merged:!1}),$=()=>new Map;class le{constructor(e=[],s={}){this.h=!1,this.l=new Map,this.p={conditionsMatcher:s.conditionsMatcher,fieldMatcher:s.fieldMatcher,resolveAction:s.resolveAction||se},this.$=s.anyAction||"manage",this.A=s.anySubjectType||"all",this.m=e,this.M=!!s.detectSubjectType,this.j=s.detectSubjectType||m,this.v(e)}get rules(){return this.m}detectSubjectType(e){return h(e)?e:e?this.j(e):this.A}update(e){const s={rules:e,ability:this,target:this};return this._("update",s),this.m=e,this.v(e),this._("updated",s),this}v(e){const s=new Map;let n;for(let r=e.length-1;r>=0;r--){const i=e.length-r-1,o=new re(e[r],this.p,i),l=d(o.action),a=d(o.subject||this.A);!this.h&&o.fields&&(this.h=!0);for(let c=0;c<a.length;c++){const A=u(s,a[c],$);n===void 0&&(n=typeof a[c]),typeof a[c]!==n&&n!=="mixed"&&(n="mixed");for(let f=0;f<l.length;f++)u(A,l[f],v).rules.push(o)}}if(this.l=s,n!=="mixed"&&!this.M){const r=g[n]||g.string;this.j=r}}possibleRulesFor(e,s=this.A){if(!h(s))throw new Error('"possibleRulesFor" accepts only subject types (i.e., string or class) as the 2nd parameter');const n=u(this.l,s,$),r=u(n,e,v);if(r.merged)return r.rules;const i=e!==this.$&&n.has(this.$)?n.get(this.$).rules:void 0;let o=y(r.rules,i);return s!==this.A&&(o=y(o,this.possibleRulesFor(e,this.A))),r.rules=o,r.merged=!0,o}rulesFor(e,s,n){const r=this.possibleRulesFor(e,s);if(n&&typeof n!="string")throw new Error("The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details");return this.h?r.filter(i=>i.matchesField(n)):r}actionsFor(e){if(!h(e))throw new Error('"actionsFor" accepts only subject types (i.e., string or class) as a parameter');const s=new Set,n=this.l.get(e);n&&Array.from(n.keys()).forEach(i=>s.add(i));const r=e!==this.A?this.l.get(this.A):void 0;return r&&Array.from(r.keys()).forEach(i=>s.add(i)),Array.from(s)}on(e,s){this.F=this.F||new Map;const n=this.F,r=n.get(e)||null,i=ie(s,r);return n.set(e,i),()=>{const o=n.get(e);!i.next&&!i.prev&&o===i?n.delete(e):i===o&&n.set(e,i.prev),oe(i)}}_(e,s){if(!this.F)return;let n=this.F.get(e)||null;for(;n!==null;){const r=n.prev?ce(n.prev):null;n.value(s),n=r}}}class w extends le{can(e,s,n){const r=this.relevantRuleFor(e,s,n);return!!r&&!r.inverted}relevantRuleFor(e,s,n){const r=this.detectSubjectType(s),i=this.rulesFor(e,r,n);for(let o=0,l=i.length;o<l;o++)if(i[o].matchesConditions(s))return i[o];return null}cannot(e,s,n){return!this.can(e,s,n)}}const ae={$eq:k,$ne:N,$lt:C,$lte:q,$gt:z,$gte:T,$in:P,$nin:_,$all:S,$size:R,$regex:O,$options:E,$elemMatch:M,$exists:F},ue={eq:Z,ne:X,lt:W,lte:V,gt:U,gte:Q,in:L,nin:K,all:J,size:I,regex:H,elemMatch:B,exists:Y,and:G},he=j(ae,ue),fe=/[-/\\^$+?.()|[\]{}]/g,de=/\.?\*+\.?/g,pe=/\*+/,ge=/\./g;function be(t,e,s){const n=s[0]==="*"||t[0]==="."&&t[t.length-1]==="."?"+":"*",r=t.indexOf("**")===-1?"[^.]":".",i=t.replace(ge,"\\$&").replace(pe,r+n);return e+t.length===s.length?`(?:${i})?`:i}function ye(t,e,s){return t==="."&&(s[e-1]==="*"||s[e+1]==="*")?t:`\\${t}`}function ve(t){const e=t.map(n=>n.replace(fe,ye).replace(de,be)),s=e.length>1?`(?:${e.join("|")})`:e[0];return new RegExp(`^${s}$`)}const $e=t=>{let e;return s=>(typeof e>"u"&&(e=t.every(n=>n.indexOf("*")===-1)?null:ve(t)),e===null?t.indexOf(s)!==-1:e.test(s))};class Ae extends w{constructor(e=[],s={}){super(e,Object.assign({conditionsMatcher:he,fieldMatcher:$e},s))}}function me(t){if(Object.hasOwn(t,"possibleRulesFor"))return t;const e=ee(!0);t.on("updated",()=>{e.value=!e.value});const s=t.possibleRulesFor.bind(t);return t.possibleRulesFor=(n,r)=>(e.value=e.value,s(n,r)),t.can=t.can.bind(t),t.cannot=t.cannot.bind(t),t}const x=Symbol("ability");function je(){const t=D(x);if(!t)throw new Error("Cannot inject Ability instance because it was not provided");return t}function Fe(t,e,s){if(!e||!(e instanceof w))throw new Error("Please provide an Ability instance to abilitiesPlugin plugin");t.provide(x,me(e)),s&&s.useGlobalProperties&&(t.config.globalProperties.$ability=e,t.config.globalProperties.$can=e.can.bind(e))}export{Ae as A,Fe as l,je as u};
